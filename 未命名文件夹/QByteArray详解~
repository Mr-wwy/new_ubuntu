QByteArray在串口通讯中经常被使用，有一定必要较为全面详细的对QByteArray进行阐述。本文通过以下几个部分加以介绍：

1. 初始化

2. 访问与赋值

3. 添加、删除、插入与替换操作

4. 查找与比较

5. 数据转换与处理
1 初始化
2 访问与赋值

    访问QByteArray主要有4中方式，分别为[]、at()、data[]和constData[]。其中[]和data[]为可读可写，at()和constData[]仅为可读。如果仅是读，则通过at()和constData[]访问速度最快，因可避免复制处理。示例如下：

    QByteArray ba;
    ba.resize(6);
    ba[0] = 0x3c;
    ba[1] = 0xb8;
    ba[2] = 0x64;
    ba[3] = 0x18;
    ba[4] = 0xca;
    ba.data()[5] = 0x31;
    qDebug()<<"[]"<<ba[2]; //[] d
    qDebug()<<"at()"<<ba.at(2); //at() d
    qDebug()<<"data()"<<ba.data()[2]; //data() d
    qDebug()<<"constData()"<<ba.constData()[2]; //constData() d
    qDebug()<<"constData()"<<ba.constData()[5]; //constData() 1

3 添加、删除、插入与替换操作
4 查找与比较
5 数据转换与处理

    从串口读取到的QByteArray数据，一般需要进行提取和解析，此时就需要QByteArray转换为各类型数据。常用转换包括：

    1）转为HEX，用于显示十六进制，这点在调试时特别有用，因为大多HEX码是没有字符显示的，如0x00、0x20等等；

    2）转为不同进制数值并显示，如二进制、八进制、十进制和十六进制等；

    3）转为整型、浮点型等数值类型；

    4）大小写转换；

    5）转为字符串类型；
5.1 Hex转换

    把Hex编码转换为char存储到QByteArray：

    QByteArray text = QByteArray::fromHex("517420697320677265617421");
    text.data();            // returns "Qt is great!"

    把QByteArray转为Hex编码：

    QByteArray ba;
    ba.resize(3);
    ba[0] = 0x30;
    ba[1] = 0x31;
    ba[2] = 0x32;
    qDebug() << ba.toHex(); //return "303132"

5.2 数值转换与输出

    尽管QByteArray是一个集合，但也可以作为一个特殊形式的数值用，其灵活的转换格式，可大大方便各种格式数据转换与显示的需求。如显示二进制和十六进制、显示科学计数和指定小数位的数值。示例如下：

    把单个字符转为2-36进制数据格式：

    int n = 63;
    qDebug()<<QByteArray::number(n);              // returns "63"
    qDebug()<<QByteArray::number(n, 16);          // returns "3f"
    qDebug()<<QByteArray::number(n, 16).toUpper();  // returns "3F"
    qDebug()<<QByteArray::number(n, 2);          // returns "111111"
    qDebug()<<QByteArray::number(n, 8);          // returns "77"

    按照指定进制格式直接复制，其中n可以是各类常见数值类型：

    QByteArray ba;
    int n = 63;
    ba.setNum(n);           // ba == "63"
    ba.setNum(n, 16);       // ba == "3f"

    把数值按指定格式和小数位转换输出，小数位四舍五入：

    QByteArray ba1 = QByteArray::number(12.3456, 'E', 3);
    QByteArray ba2 = QByteArray::number(12.3456, 'f', 3);
    qDebug()<<ba1;  // returns "1.235E+01"
    qDebug()<<ba2;  // returns "12.346"

5.3 字符串数值转为各类数值

    QByteArray若为数值，可通过to**方法转为各种类型数据，示例如下：

    QByteArray strInt("1234");
    bool ok0;
    qDebug() << strInt.toInt();   // return 1234
    qDebug() << strInt.toInt(&ok0,16);   // return 4660, 默认把strInt作为16进制的1234，对应十进制数值为4660
     
    QByteArray string("1234.56");
    bool ok1;
    qDebug() << string.toInt();   // return 0, 小数均视为0
    qDebug() << string.toInt(&ok1,16);   // return 0, 小数均视为0
    qDebug() << string.toFloat();   // return 1234.56
    qDebug() << string.toDouble();   // return 1234.56
     
    QByteArray str("FF");
    bool ok2;
    qDebug() << str.toInt(&ok2, 16);     // return 255, ok2 == true
    qDebug() << str.toInt(&ok2, 10);     // return 0, ok == false, 转为十进制失败

5.4 大小写转换

    QByteArray若为带大小写的字符串，可通过toUpper()和toLower()方法实现大小写转换，示例如下：

    QByteArray x("Qt by THE QT COMPANY");
    QByteArray y = x.toLower();
    // y == "qt by the qt company"
     
    QByteArray z = x.toUpper();
    // z == "QT BY THE QT COMPANY"

5.5 与字符串互转

    QByteArray与QString互转极为简单，二者从本质上类似，都是连续存储，区别是前者可以存无法显示的字符，后者只存可显示的字符。如QByteArray可以存0x00-0x19，而QString则存储如0x30等可显示字符（0x20-0x7E）。可显示字符可参见ASCII表，链接如下：ASCII可显示字符

    QByteArray转为QString示例：

    QByteArray ba("abc123");
    QString str = ba; 
    //或str.prepend(ba);
    qDebug()<<str ;
    //输出："abc123"

    QString转为QByteArray示例：

    QString str("abc123");
    QByteArray ba = str.toLatin1();
    qDebug()<<ba;
    //输出："abc123"

QByteArray类学习（QT常见类学习1）

	QByteArray类提供了字节数组，包含于<QByteArray>头文件中，从Q3CString类继承而来。

	QByteArray可以存储raw bytes和传统的8-bits的字符串，都是以'\0'结尾的，使用比char*更方便

	QString也可以存储字符串信息，但通常以16-bits形式Unicode方式存储，这有利于非ASCII和非Latin-1格式的数据的存储，例如GBK等中文

	QByteArray适合的两个主要情况是当您需要存储原始二进制数据，并且当内存保护至关重要时（例如，使用嵌入式Linux的Qt）

	size()大小，不包含'\0' ，qstrlen()包含'\0'

	resize()可以重新定义大小

	data()所存储的数据对象，返回一个指针

	at()与[]效果一样，都是去第i+1的字节

	Left(int len) right(int len) mid(int  pos, int len)都是从该字符串中提取左、右和从pos开始的len个字节的成员函数，返回QByteArray类型

	Prepend() append() 分别是从前面和后面添加字符串

	Replace(5,3,"&")从第五个字节起的3个字节都用"&"来被替换

	indexOf("pch")在该字符数组中检索pch字符串，返回第一个pch第一个字符的位置，若未找到则返回-1

	lastIndexOf()返回最后一个符合的字符串首字符的位置

	isNull()判断字符数组是否为空("")=0

	isEmpty()判断该字符数组是否有内容("")=1

	QByteArray ()构造一个empty的字符数组

	QByteArray ( const char * str )用str来初始化

	QByteArray ( const char * data, int size )用前size个字节来初始化

	QByteArray ( int size, char ch )size个字节都是 ch

	QByteArray ( const QByteArray & other )拷贝构造函数

	Chop(int n)从最后删除n个字节

	Clear()清空

	int QByteArray::count ( const QByteArray & ba ) const返回ba在字符数组中出现的次数


QImage转	QByteArray并通过udp/tcp发送
发送端：
	QImage m_image;
	QByteArray byte;
    QBuffer buff(&byte);
    m_image.save(&buff, "JPG");

    QByteArray ss = qCompress(byte,1);
    QByteArray vv = ss.toBase64();
    video_fd->writeDatagram(vv.data(), vv.size(),QHostAddress(m_ip),m_port.toInt());


	

		QBuffer buffer;
        buffer.open(QIODevice::ReadWrite);
	//pixmap不能为空，必须先将图片加载到pixmap中
        pixmap.save(&buffer,"jpg");
        QByteArray pixArray;
        pixArray.append(buffer.data());

    
接收端：   
    quint16 size = video_fd->pendingDatagramSize();
    QByteArray buff;
    buff.resize(size);
    video_fd->readDatagram(buff.data(), buff.size());

/*    QBuffer buffer(&buff);
    QImageReader reader(&buffer, "JPG");
    QImage image = reader.read();
*/
    QByteArray decryptedByte;
    decryptedByte=QByteArray::fromBase64(buff.data());
    QByteArray uncompressByte=qUncompress(decryptedByte);
    QImage image;
    image.loadFromData(uncompressByte);


